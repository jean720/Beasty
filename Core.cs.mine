using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace Beasty
{

    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Core : Microsoft.Xna.Framework.Game
    {






        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        GamePadState lastGamePadState = new GamePadState();
        GamePadState currentGamePadState = new GamePadState();
        private bool disconnected=false;
        private bool useingGamePad = false;
        private bool paused = false;

        private List<BaseUnit> units = new List<BaseUnit>();
        private List<BaseUnit> border = new List<BaseUnit>();

        public Core()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
             



            // Create our units
            UnitFactory factory = new ConcreteUnitFactory(Content);

            BaseUnit p1 = factory.CreateUnit(UnitType.Tank, new Vector2(700, 0));
            BaseUnit p2 = factory.CreateUnit(UnitType.Pigeon, new Vector2(-700, 0));

            units.Add(p1);
            units.Add(p2);

            GamePadState currentState = GamePad.GetState(PlayerIndex.One);
            if (currentState.IsConnected==true) { useingGamePad = true; }

            for (int i = -10; i <= 10; i++)
            {
                border.Add(factory.CreateUnit(UnitType.Box, new Vector2(i * 500, 0)));
                border.Add(factory.CreateUnit(UnitType.Box, new Vector2(i * 500, 5000)));
                border.Add(factory.CreateUnit(UnitType.Box, new Vector2(5000, i * 250+2500)));
                border.Add(factory.CreateUnit(UnitType.Box, new Vector2(-5000, i * 250+2500)));
            }
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        /// 

        // The aspect ratio determines how to scale 3d to 2d projection.
        float aspectRatio;
        SpriteFont msgFont;
        Vector2 msgFontPos;

        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            // spriteBatch = new SpriteBatch(GraphicsDevice);
            spriteBatch = new SpriteBatch(GraphicsDevice);
            msgFont = Content.Load<SpriteFont>("msg");
            aspectRatio = graphics.GraphicsDevice.Viewport.AspectRatio;
            // TODO: use this.Content to load your game content here
            msgFontPos = new Vector2(graphics.GraphicsDevice.Viewport.Width / 2,
            graphics.GraphicsDevice.Viewport.Height / 2);


 
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            KeyboardState keyState = Keyboard.GetState();
            if (useingGamePad == true)
            {
                lastGamePadState = currentGamePadState;
                currentGamePadState = GamePad.GetState(PlayerIndex.One);
                if (currentGamePadState.IsConnected == false) { disconnected = true; }
                else if (currentGamePadState.IsConnected == true) { disconnected = false; }

                // Allows the game to exit
                if (currentGamePadState.Buttons.Back == ButtonState.Pressed)
                    this.Exit();
                if (currentGamePadState.Buttons.Start == ButtonState.Pressed && lastGamePadState.Buttons.Start == ButtonState.Released)
                {
                    if (paused == true)
                        paused = false;
                    else
                        paused = true;
                }
                if(!paused)
                    units[0].Move(new Vector2(10 * currentGamePadState.ThumbSticks.Left.X,
                    10 * currentGamePadState.ThumbSticks.Left.Y));

            }
            else
            {
                if (keyState.IsKeyDown(Keys.W)) { units[0].Move(new Vector2(0, 1)); }
                if (keyState.IsKeyDown(Keys.S)) { units[0].Move(new Vector2(0, -1)); }
                if (keyState.IsKeyDown(Keys.A)) { units[0].Move(new Vector2(-1, 0)); }
                if (keyState.IsKeyDown(Keys.D)) { units[0].Move(new Vector2(1, 0)); }
            }
            if (keyState.IsKeyDown(Keys.Escape))
            {
                foreach (BaseUnit unit in units) { unit.Reset(); }
            }
            if (keyState.IsKeyDown(Keys.Up)) { units[1].Move(new Vector2(0, 1)); }
            if (keyState.IsKeyDown(Keys.Down)) { units[1].Move(new Vector2(0, -1)); }
            if (keyState.IsKeyDown(Keys.Left)) { units[1].Move(new Vector2(-1, 0)); }
            if (keyState.IsKeyDown(Keys.Right)) { units[1].Move(new Vector2(1, 0)); }

            // Updates each unit
            if (!paused)
            {
                foreach (BaseUnit unit in units)
                { unit.Update(); }

                // HAHA, ridiculous, no sense of momentum >__<
                // try using p=mv to conserve momentum, mmmmkay?
                if(Collider.collides(this.units[0], this.units[1])) {
                    this.units[0].Collide(this.units[1]);
                    this.units[1].Collide(this.units[0]);
                }

                base.Update(gameTime);


                cameraPosition.Z = Math.Max(1000f, 
                    Vector2.Distance(units[0].position, units[1].position) * 2);
                cameraLookAt.X = (units[0].position.X + units[1].position.X) / 2;
                cameraLookAt.Y = (units[0].position.Y + units[1].position.Y) / 2;
                cameraPosition.X = cameraLookAt.X;
                cameraPosition.Y = cameraLookAt.Y;

                Console.Out.WriteLine(cameraPosition.Z);
            }
       }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        /// 

        // Set the position of the camera in world space, for our view matrix.
        Vector3 cameraPosition = new Vector3(0f, 50f, 5000f);
        Vector3 cameraLookAt = new Vector3();
        ///------------------

        
        protected override void Draw(GameTime gameTime)
        {
            if(disconnected)
            {
                spriteBatch.Begin();

                string output = "Please reconnect the Game Pad";

                Vector2 FontOrigin = msgFont.MeasureString(output) / 2;
                spriteBatch.DrawString(msgFont, output, msgFontPos, Color.LightGreen,
                    0, FontOrigin, 1.0f, SpriteEffects.None, 0.5f);

                spriteBatch.End();
            }
            else if (paused)
            {
                //spriteBatch.Begin(SpriteBlendMode.AlphaBlend, SpriteSortMode.BackToFront, SaveStateMode.None);
                spriteBatch.Begin();

                string output = "Game is Paused";

                Vector2 FontOrigin = msgFont.MeasureString(output) / 2;
                spriteBatch.DrawString(msgFont, output, msgFontPos, Color.LightGreen,
                    0, FontOrigin, 1.0f, SpriteEffects.None, 0.5f);

                spriteBatch.End();
            }
            else
            {
                GraphicsDevice.Clear(Color.CornflowerBlue);
                foreach (BaseUnit unit in this.units)
                { unit.Draw(cameraPosition, cameraLookAt, aspectRatio); }
                base.Draw(gameTime);
            }

            foreach (BaseUnit b in this.border)
            { b.Draw(cameraPosition, cameraLookAt, aspectRatio); }
        }
    }
}
